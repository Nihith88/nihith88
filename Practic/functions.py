"""Функции в языке Python
Ф-я это фрагмент программного кода (подппрограмма), к которому можнообратиться в любом месте программы,
нужны для повторного кода, дабы не писать его несколько раз для создания более логичной структуры программы
для объединения нескольких небольших действий в одно,vprint, input, len, range, type, int, str - это встроенные функции.
abs - модуль числа,
- имеют имя, можно создавать функии без имени
min, max - минимальное и максимальное значение последовательности
round - округление числа, sum - сумма элементов последовательности
enumerate - пронумеровать последовательность для использования в цикле
for number, winner in enumerate(winners, 1):
    print(winner, number)


                               Работа с функциями в последовательностях

"""

"""numbers = []  # Заполнение списка по диапазону
for i in range(3):
    number = int(input('Insert number'))
    numbers.append(number)
print(numbers)
print(min(numbers))  # минимальный элемент последовательности
print(max(numbers))  # максимальный
print(sum(numbers))  # сумма элементов последовательности
"""


# Создание собственных функций

def pr_dummy(sep, sep_len):  # Объявление функции, без параметров и возврата
    # print(sep * sep_len)  # Тело функции (те действия,  которые выполняет функция при ее вызове)
    return sep * sep_len


print(pr_dummy('0', 20))  # Вызов функции c параметрами
sepo = pr_dummy('-', 5)  # Присвоение переменной результата выполнения функции
text = 'my first func {} stay {} strong'.format(sepo, sepo)  # Включение переменной в строку
print(text)


# Передача параметров в функцию: по порядку, по имени
# def geeting(name, say='salam'):  # Объявление функции с параметрами по умолчанию
# print(say, name)
# geeting('hell')

# Иногда нужно реализовать передачу любого количества аргументов
# *args - передача любого количества аргументов по порядку, **kwargs - передача любого количества по имени

def greet(say, *args):
    print(say, *args)


greet('salam', 'slut', 'whore')  # можем передать сколько угодно параметров в виде кортежа

def person(**kwargs):
    for n, a in kwargs.items():
        print(n,a)
person(name = 'Kate', age = 20, has_car = True)  # в случае **kwargs мы получим словарь

# Области видимости функции

def my_f(varr):
    varr = 999
    print(varr)


a = 12
my_f(a) # Переменная снаружи функции не изменит свое значение. Короче, переменная внутри функции и снаружи ее
# не одно и то же.

# Локальные и глобальные переменные. Глобальными называют функции, объявление кот. дано вне функции
# они доступны во всем файле. Локальные же объявлены внутри блока или функции
# глобалбные переменные д.б. объявлены выше объявления функции



